
# HTTP to HTTPS redirect
server {
    # Listen on port 80 (HTTP) via IPv4 and IPv6.
    listen 80;
    listen [::]:80;

    # Set domain names to listen under for this directive.
    server_name nekocloud.catlinman.com;

    # Redirect to the same address but as an HTTPS connection.
    return 301 https://$server_name$request_uri;
}

# SSL server setup
server {
    # Listen on port 443 (HTTPS) via IPv4 and IPv6.
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Include SSL configuration.
    include snippets/ssl-catlinman.com.conf;
    include snippets/ssl-params.conf;

    # Include security headers.
    include snippets/security-headers.conf;

    add_header Content-Security-Policy "frame-src 'self' https://nekodocs.catlinman.com";

    # Set domain names to listen under for this directive.
    server_name nekocloud.catlinman.com;

    # Set the root directory.
    root /srv/nekocloud.catlinman.com/;

    # Set custom access and error logs.
    access_log /srv/nekocloud.catlinman.com/access.log;
    error_log /srv/nekocloud.catlinman.com/error.log;

    # Pass any errors and access to the default nginx logs. Use the vhosts format.
    access_log /var/log/nginx/access.log vhosts;
    error_log /var/log/nginx/error.log;

    # Pass set the robots.txt configuration.
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    # rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    # rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

    location = /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }

    location = /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
    }
    
    location = /.well-known/webfinger {
        return 301 $scheme://$host/public.php?service=webfinger;
    }

    location ^~ /.well-known {
        return 301 /index.php$uri;
    }

    location /.well-known/acme-challenge {}

    # Set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;

    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # Uncomment if your server is build with the ngx_pagespeed module.
    # This module is currently not supported.
    # pagespeed off;

    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;

    location / {
        rewrite ^ /index.php;
    }

    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        return 404;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
        return 404;
    }

    location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy)\.php(?:$|\/) {
        # Include the default fastcgi-php setup but without the custom socket pass.
        include snippets/fastcgi-php-custom.conf;

        # Use PHP FPM. Note: Add in main server configuration. Note: Make sure the socket has been defined in your php-fpm configuration.
        fastcgi_pass unix:/run/php-fpm/php-fpm-nextcloud.sock;

        # Remove Nextcloud's own CSP header.
        fastcgi_hide_header "Content-Security-Policy";
    }

	location ~ ^\/(?:updater|oc[ms]-provider)(?:$|\/) {
        try_files $uri/ =404;
        index index.php;
    }

    # Adding the cache control header for js, css and map files
    # Make sure it is BELOW the PHP block
    location ~ \.(?:css|js|woff2?|svg|gif|map)$ {
        try_files $uri /index.php$request_uri;
        add_header Cache-Control "public, max-age=15778463";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        # Before enabling Strict-Transport-Security headers please read into
        # this topic first.
        #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
        #
        # WARNING: Only add the preload option once you read about
        # the consequences in https://hstspreload.org/. This option
        # will add the domain to a hardcoded list that is shipped
        # in all major browsers and getting removed from this list
        # could take several months.
        add_header Referrer-Policy "no-referrer" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Download-Options "noopen" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        add_header X-Robots-Tag "none" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Optional: Don't log access to assets
        access_log off;
    }

    location ~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap|mp4|webm)$ {
        try_files $uri /index.php$request_uri;
        # Optional: Don't log access to other assets
        access_log off;
    }
}
